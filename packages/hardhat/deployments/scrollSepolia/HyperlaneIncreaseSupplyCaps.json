{
  "address": "0x90Daa01277e6d0776294d27b3292516E00753d11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        }
      ],
      "name": "increaseSupplyCap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d23015f1770d448d5d0115468edc50246c60efe238cafccaac6516597a688d8",
  "receipt": {
    "to": null,
    "from": "0x35f47c8507D302c4deb675cbdE2b7F9268A35f4A",
    "contractAddress": "0x90Daa01277e6d0776294d27b3292516E00753d11",
    "transactionIndex": 2,
    "gasUsed": "352012",
    "logsBloom": "0x
    "blockHash": "0x0ef25f881a192ba0f3261e82f1dae5e450205b71669bd8d6b28507baa39efbc6",
    "transactionHash": "0x7d23015f1770d448d5d0115468edc50246c60efe238cafccaac6516597a688d8",
    "logs": [],
    "blockNumber": 3308975,
    "cumulativeGasUsed": "590055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6099287ae24e1ea264d203067d0594ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"}],\"name\":\"increaseSupplyCap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperlaneIncreaseSupplyCaps.sol\":\"HyperlaneIncreaseSupplyCaps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HyperlaneIncreaseSupplyCaps.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./hyperlane/IMailbox.sol\\\";\\n\\n\\ncontract HyperlaneIncreaseSupplyCaps {\\n\\n\\n    function increaseSupplyCap(uint256 message_id) public payable {\\n        bytes memory ZERO_BYTES = new bytes(0);\\n        address[] memory targets = new address[](1);\\n        targets[0] = 0x5A16552f59ea34E44ec81E58b3817833E9fD5436;\\n\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = 0; // No ETH sent\\n\\n        string[] memory signatures = new string[](1);\\n        signatures[0] = \\\"setSupplyCap(uint256)\\\";\\n\\n        bytes[] memory calldatas = new bytes[](1);\\n        uint256 newCap = 2000 * 10**18; // 2000 tokens, assuming 18 decimals\\n        calldatas[0] = abi.encode(newCap);\\n\\n        string memory description = \\\"Proposal to increase supply cap to 2 billion.\\\";\\n\\n        // bytes of array which includes targets, values, signatures, calldatas, and description\\n\\n        bytes memory encoded = abi.encode(targets, values, signatures, calldatas, description);\\n\\n\\n        IMailbox mailbox = IMailbox(0x3C5154a193D6e2955650f9305c8d80c18C814A68);\\n        bytes32 messageId = mailbox.dispatch{value: msg.value}(\\n            11155111,\\n            addressToBytes32(0xFaA578F73C0e7C909FBAf17C530d64200563caFa),\\n            encoded\\n        );\\n\\n    }\\n\\n\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n}\\n\",\"keccak256\":\"0x5a16ca700f9fd06dde23fd6f09908da8eef0275beadf47ead8b8ede7502f13f2\",\"license\":\"MIT\"},\"contracts/hyperlane/IInterchainSecurityModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(bytes calldata _metadata, bytes calldata _message)\\n    external\\n    returns (bool);\\n}\\n\",\"keccak256\":\"0xca1cf87e4cf265e172311115963500575a485601516c4e1f058e6066256af975\",\"license\":\"MIT\"},\"contracts/hyperlane/IMailbox.sol\":{\"content\":\"import {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x119af544d16a81c440cb26b60d1db143bffbfd24214070e284fcb664cacc2d78\"},\"contracts/hyperlane/IPostDispatchHook.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfba916ebbff4c4b7040729a333a1aff64adfe72d99e6dedd3c15a5559db5dda0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610567806100206000396000f3fe60806040526004361061001e5760003560e01c8063c6ee331614610023575b600080fd5b6100366100313660046102c5565b610038565b005b60408051600080825260016020808401828152606085018652939492939285019080368337019050509050735a16552f59ea34e44ec81e58b3817833e9fd54368160008151811061008b5761008b6102de565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090506000816000815181106100dd576100dd6102de565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816100ff57905050905060405180604001604052806015815260200174736574537570706c794361702875696e743235362960581b81525081600081518110610157576101576102de565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816101795790505060408051686c6b935b8bbd4000006020820181905292935001604051602081830303815290604052826000815181106101c9576101c96102de565b602002602001018190525060006040518060600160405280602d8152602001610505602d913990506000868686868560405160200161020c95949392919061041d565b60408051808303601f190181529190529050733c5154a193d6e2955650f9305c8d80c18c814a6860008163fa31de013462aa36a773faa578f73c0e7c909fbaf17c530d64200563cafa876040518563ffffffff1660e01b8152600401610274939291906104bd565b60206040518083038185885af1158015610292573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102b791906104eb565b505050505050505050505050565b6000602082840312156102d757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b8381101561032557815187529582019590820190600101610309565b509495945050505050565b6000815180845260005b818110156103565760208185018101518683018201520161033a565b506000602082860101526020601f19601f83011685010191505092915050565b60008282518085526020808601955060208260051b8401016020860160005b848110156103c357601f198684030189526103b1838351610330565b98840198925090830190600101610395565b5090979650505050505050565b60008282518085526020808601955060208260051b8401016020860160005b848110156103c357601f1986840301895261040b838351610330565b988401989250908301906001016103ef565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561045f5781516001600160a01b03168452928401929084019060010161043a565b505050838103602085015261047481896102f4565b91505082810360408401526104898187610376565b9050828103606084015261049d81866103d0565b905082810360808401526104b18185610330565b98975050505050505050565b63ffffffff841681528260208201526060604082015260006104e26060830184610330565b95945050505050565b6000602082840312156104fd57600080fd5b505191905056fe50726f706f73616c20746f20696e63726561736520737570706c792063617020746f20322062696c6c696f6e2ea2646970667358221220b937998324a18da7f164b0fc3bef136e0bd59a1239a8d0caefde2b0f950f722464736f6c63430008160033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c8063c6ee331614610023575b600080fd5b6100366100313660046102c5565b610038565b005b60408051600080825260016020808401828152606085018652939492939285019080368337019050509050735a16552f59ea34e44ec81e58b3817833e9fd54368160008151811061008b5761008b6102de565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090506000816000815181106100dd576100dd6102de565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816100ff57905050905060405180604001604052806015815260200174736574537570706c794361702875696e743235362960581b81525081600081518110610157576101576102de565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816101795790505060408051686c6b935b8bbd4000006020820181905292935001604051602081830303815290604052826000815181106101c9576101c96102de565b602002602001018190525060006040518060600160405280602d8152602001610505602d913990506000868686868560405160200161020c95949392919061041d565b60408051808303601f190181529190529050733c5154a193d6e2955650f9305c8d80c18c814a6860008163fa31de013462aa36a773faa578f73c0e7c909fbaf17c530d64200563cafa876040518563ffffffff1660e01b8152600401610274939291906104bd565b60206040518083038185885af1158015610292573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102b791906104eb565b505050505050505050505050565b6000602082840312156102d757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b8381101561032557815187529582019590820190600101610309565b509495945050505050565b6000815180845260005b818110156103565760208185018101518683018201520161033a565b506000602082860101526020601f19601f83011685010191505092915050565b60008282518085526020808601955060208260051b8401016020860160005b848110156103c357601f198684030189526103b1838351610330565b98840198925090830190600101610395565b5090979650505050505050565b60008282518085526020808601955060208260051b8401016020860160005b848110156103c357601f1986840301895261040b838351610330565b988401989250908301906001016103ef565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561045f5781516001600160a01b03168452928401929084019060010161043a565b505050838103602085015261047481896102f4565b91505082810360408401526104898187610376565b9050828103606084015261049d81866103d0565b905082810360808401526104b18185610330565b98975050505050505050565b63ffffffff841681528260208201526060604082015260006104e26060830184610330565b95945050505050565b6000602082840312156104fd57600080fd5b505191905056fe50726f706f73616c20746f20696e63726561736520737570706c792063617020746f20322062696c6c696f6e2ea2646970667358221220b937998324a18da7f164b0fc3bef136e0bd59a1239a8d0caefde2b0f950f722464736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}